---
export interface Props {
  currentPage?: string;
}

const { currentPage } = Astro.props;
const isHomePage = currentPage === '/' || Astro.url.pathname === '/';

const navItems = [
  { href: '/', label: 'HOME', number: '01' },
  { href: '/about-me', label: 'ABOUT', number: '02' },
  { href: '/blog', label: 'BLOG', number: '03' },
  { href: '/gallery', label: 'GALLERY', number: '04' },
  { href: '/contact', label: 'CONTACT', number: '05' }
];

// Function to check if current page matches the nav item
function isActive(href: string, currentPage?: string) {
  if (!currentPage) return false;
  if (href === '/' && currentPage === '/') return true;
  if (href !== '/' && currentPage.startsWith(href)) return true;
  return false;
}
---

<!-- Floating Navigation Menu -->
<nav class="floating-nav">
  <div class="mobile-nav-toggle" id="mobileNavToggle">
    <span class="hamburger-line"></span>
    <span class="hamburger-line"></span>
    <span class="hamburger-line"></span>
  </div>
  <div class="nav-menu" id="navMenu">
    {navItems.map(item => (
      <a href={item.href} class={`nav-item ${isActive(item.href, currentPage) ? 'active' : ''}`}>
        <span class="nav-number">{item.number}</span>
        <span class="nav-label">{item.label}</span>
      </a>
    ))}
  </div>
</nav>

<style>
  /* Floating Navigation Styles */
  .floating-nav {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    padding: 1rem 2rem;
  }

  .floating-nav.scrolled {
    top: 2rem;
    left: 2rem;
    right: auto;
    width: auto;
    min-width: 140px;
    background: white;
    border-radius: 0;
    border: none;
    box-shadow: none;
    padding: 0;
  }

  .nav-menu {
    display: flex;
    justify-content: center;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .floating-nav.scrolled .nav-menu {
    display: block;
    gap: 0;
  }

  .nav-item {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 0.8rem 1.5rem;
    text-decoration: none;
    color: #333;
    font-size: 1rem;
    font-weight: 400;
    transition: all 0.3s ease;
    border-radius: 25px;
    position: relative;
    overflow: hidden;
    white-space: nowrap;
  }

  .floating-nav.scrolled .nav-item {
    padding: 0.7rem 1rem;
    border-radius: 0;
    border-bottom: 1px solid #f5f5f5;
  }

  .floating-nav.scrolled .nav-item:last-child {
    border-bottom: none;
  }

  .nav-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: #f8f8f8;
    transition: left 0.3s ease;
    z-index: -1;
  }

  .nav-item:hover::before {
    left: 0;
  }

  .nav-item:hover {
    background: rgba(0, 0, 0, 0.05);
  }

  .floating-nav.scrolled .nav-item:hover {
    background: transparent;
  }

  .nav-item.active .nav-number {
    background: #6b8e6b;
    color: white;
  }

  .nav-item.active {
    background: rgba(107, 142, 107, 0.1);
    color: #6b8e6b;
    font-weight: 500;
  }

  .floating-nav.scrolled .nav-item.active {
    background: transparent;
    color: #333;
  }

  .nav-number {
    font-size: 1rem;
    font-weight: 500;
    min-width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .nav-label {
    font-size: 1.1rem;
    font-weight: 700;
    letter-spacing: 0.5px;
  }

  .floating-nav.scrolled .nav-label {
    font-weight: 500;
  }

  @media (max-width: 1024px) {
    .floating-nav {
      top: 1rem;
      left: 1rem;
      right: auto;
      width: auto;
      min-width: auto;
      z-index: 1001;
      background: none;
      border: none;
      padding: 0;
      backdrop-filter: none;
    }

    .mobile-nav-toggle {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 4px;
      width: 30px;
      height: 30px;
      background: white;
      border: 1px solid #eee;
      border-radius: 6px;
      padding: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
      z-index: 1002;
    }

    .hamburger-line {
      width: 100%;
      height: 2px;
      background: #333;
      transition: all 0.3s ease;
    }

    .mobile-nav-toggle.active .hamburger-line:nth-child(1) {
      transform: rotate(45deg) translate(6px, 6px);
    }

    .mobile-nav-toggle.active .hamburger-line:nth-child(2) {
      opacity: 0;
    }

    .mobile-nav-toggle.active .hamburger-line:nth-child(3) {
      transform: rotate(-45deg) translate(6px, -6px);
    }

    .nav-menu {
      position: fixed;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100vh;
      background: white;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 2rem;
      transition: left 0.4s ease;
      z-index: 999;
      cursor: pointer;
    }

    .nav-menu.show {
      left: 0;
    }

    .nav-item {
      padding: 1rem 2rem;
      gap: 1rem;
      border-bottom: none;
      cursor: pointer;
      display: flex;
      align-items: center;
    }

    .nav-number {
      font-size: 1.8rem;
      min-width: 40px;
      height: 40px;
    }

    .nav-label {
      font-size: 2.2rem;
      font-weight: 500;
    }
  }

  @media (min-width: 1025px) {
    .mobile-nav-toggle {
      display: none;
    }

    .nav-menu {
      position: static;
      opacity: 1;
      visibility: visible;
      transform: none;
      background: none;
      border: none;
      border-radius: 0;
    }

    .floating-nav.scrolled .nav-number {
      display: flex;
    }

    .floating-nav:not(.scrolled) .nav-number {
      display: none;
    }
  }
</style>

<script>
  function initFloatingNav() {
    // Mobile hamburger menu toggle
    const mobileToggle = document.getElementById('mobileNavToggle');
    const navMenu = document.getElementById('navMenu');
    
    if (mobileToggle && navMenu) {
      // Remove existing listeners to prevent duplicates
      mobileToggle.replaceWith(mobileToggle.cloneNode(true));
      const newMobileToggle = document.getElementById('mobileNavToggle');
      
      // Toggle menu when clicking hamburger
      newMobileToggle?.addEventListener('click', function(e) {
        e.stopPropagation();
        newMobileToggle.classList.toggle('active');
        navMenu.classList.toggle('show');
      });

      // Close menu when clicking anywhere on the overlay (but not on nav items)
      navMenu.addEventListener('click', function(event) {
        // Only close if clicking on the background, not on nav items
        if (event.target === navMenu) {
          newMobileToggle?.classList.remove('active');
          navMenu.classList.remove('show');
        }
      });

      // Close menu when pressing escape key
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && navMenu.classList.contains('show')) {
          newMobileToggle?.classList.remove('active');
          navMenu.classList.remove('show');
        }
      });

      // Close menu when clicking nav items (navigate)
      const navItems = navMenu.querySelectorAll('.nav-item');
      navItems.forEach(item => {
        item.addEventListener('click', function() {
          newMobileToggle?.classList.remove('active');
          navMenu.classList.remove('show');
        });
      });
    }

    // Handle scroll behavior for desktop navigation
    const floatingNav = document.querySelector('.floating-nav');
    const isHomePage = window.location.pathname === '/';
    let isScrolled = false;

    function handleScroll() {
      if (window.innerWidth > 1024) {
        // Desktop behavior
        const scrollY = window.scrollY;
        
        if (isHomePage) {
          // On home page: always stay collapsed, never show full topnav
          if (!isScrolled) {
            floatingNav?.classList.add('scrolled');
            isScrolled = true;
          }
        } else {
          // On other pages: normal behavior (expand at top, collapse when scrolled)
          const shouldBeScrolled = scrollY > 50;
          
          if (shouldBeScrolled && !isScrolled) {
            floatingNav?.classList.add('scrolled');
            isScrolled = true;
          } else if (!shouldBeScrolled && isScrolled) {
            floatingNav?.classList.remove('scrolled');
            isScrolled = false;
          }
        }
      } else {
        // Mobile: never use scrolled class
        if (isScrolled) {
          floatingNav?.classList.remove('scrolled');
          isScrolled = false;
        }
      }
    }

    // Remove existing scroll listener
    window.removeEventListener('scroll', handleScroll);
    // Listen for scroll events
    window.addEventListener('scroll', handleScroll);
    // Listen for resize events to handle desktop/mobile transitions
    window.addEventListener('resize', handleScroll);
    
    // Check initial state
    handleScroll();
  }

  // Initialize on page load
  initFloatingNav();

  // Re-initialize on Astro page transitions
  document.addEventListener('astro:page-load', initFloatingNav);
</script> 