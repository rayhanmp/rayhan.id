---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Footer from '../../components/Footer.astro';
import { getReadingTime } from '../../utils/readingTime';

export async function getStaticPaths() {
  const allPosts = await getCollection('posts');
  const posts = allPosts
    .filter((post) => post.data.isPublished)
    .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

  const POSTS_PER_PAGE = 9;
  const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages }, (_, i) => {
    const pageNum = i + 1;
    const start = i * POSTS_PER_PAGE;
    const end = start + POSTS_PER_PAGE;

    return {
      params: { page: String(pageNum) },
      props: {
        posts: posts.slice(start, end),
        currentPage: pageNum,
        totalPages: totalPages,
        allPosts: posts
      }
    };
  });
}

const { posts, currentPage, totalPages, allPosts } = Astro.props;

const allTags = Array.from(
  new Set(allPosts.flatMap(post => post.data.tags || []))
).sort((a, b) => {
  const countA = allPosts.filter(post => post.data.tags?.includes(a)).length;
  const countB = allPosts.filter(post => post.data.tags?.includes(b)).length;
  return countB - countA;
});

// Featured post - docking article (Part 1)
const featuredPost = currentPage === 1 ? allPosts.find(post => post.slug === 'a-primer-on-molecular-docking-part-1-structure-binding') : null;

// Generate pagination buttons
const paginationButtons = [];
for (let i = 1; i <= totalPages; i++) {
  const showPage =
    i === 1 ||
    i === totalPages ||
    (i >= currentPage - 1 && i <= currentPage + 1);

  const showEllipsisBefore = i === currentPage - 2 && currentPage > 3;
  const showEllipsisAfter = i === currentPage + 2 && currentPage < totalPages - 2;

  if (showEllipsisBefore || showEllipsisAfter) {
    paginationButtons.push({ type: 'ellipsis' });
  } else if (showPage) {
    paginationButtons.push({ type: 'page', pageNum: i, isActive: i === currentPage });
  }
}
---

<BaseLayout
  title="Blog – Rayhan Maheswara Pramanda"
  description="Technical insights and explorations across machine learning, data science, backend development, biology, and more. Thoughts on technology, code, and science."
  currentPage="/blog">
  <style>
    .blog-post {
      margin-bottom: 2.5rem;
      padding: 1.5rem;
      border: 1px solid #ddd;
      border-radius: 12px;
      background: #fff;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .blog-post:hover {
      transform: translateY(-5px);
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .blog-title {
      font-size: 1.5rem;
      font-weight: bold;
      color: #222;
      margin-bottom: 0.5rem;
      letter-spacing: -0.065rem;
    }

    .blog-header {
      text-align: left;
      margin: 10rem 0 4rem 0;
    }

    @media (max-width: 1024px) {
      .blog-header {
        margin: 8rem 0 4rem 0;
      }
    }

    .blog-header h1 {
      font-size: 5.5rem;
      line-height: 1.1;
      margin-bottom: 1rem;
      font-weight: 300;
      color: #9b9b9b;
    }

    .blog-header .highlight {
      font-weight: 700;
      color: #000;
    }

    .blog-header p {
      font-size: 1.8rem;
      color: #666;
      margin-bottom: 2rem;
      line-height: 1.4;
    }

    .blog-divider {
      width: 100%;
      height: 1px;
      background: #ddd;
      margin: 3rem 0;
    }

    .back-home {
      text-align: center;
      margin-bottom: 2rem;
    }

    .back-home a {
      color: #111;
      font-weight: 600;
      text-decoration: none;
      border-bottom: 2px solid #111;
    }

    .back-home a:hover {
      opacity: 0.8;
    }

    .blog-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem 2rem;
      margin-top: 2rem;
      justify-items: center;
      margin-bottom: 4rem;
    }

    .blog-card {
      display: flex;
      flex-direction: column;
      padding: 0;
      border: 1px solid #ddd;
      border-radius: 12px;
      background: #fff;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      height: 100%;
      min-height: 150px;
      overflow: hidden;
      text-decoration: none;
      color: inherit;
      width: 100%;
      max-width: 350px;
    }

    .blog-hero-image {
      width: 100%;
      height: 150px;
      overflow: hidden;
      border-radius: 12px 12px 0 0;
    }

    .blog-hero-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .blog-card:hover .blog-hero-image img {
      transform: scale(1.05);
    }

    .blog-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex-grow: 1;
    }

    .blog-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
    }

    .blog-title {
      font-size: 1.5rem;
      font-weight: bold;
      color: #222;
      margin-bottom: 0.5rem;
      margin-top: 0;
      letter-spacing: -0.065rem;
    }

    .blog-title:hover {
      color: #555;
    }

    .blog-meta {
      font-size: 1.35rem;
      color: #666;
      margin-bottom: 0.75rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .blog-date {
      font-size: 1.35rem;
      color: #666;
    }

    .blog-reading-time {
      font-size: 1.35rem;
      color: #666;
    }

    .meta-separator {
      color: #999;
      font-weight: bold;
    }

    .blog-description {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
      text-overflow: ellipsis;
      line-height: 1.5;
      margin-bottom: auto;
      flex-grow: 1;
    }

    .tag-list {
      margin-top: 1rem;
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      min-height: 2rem;
    }

    .tag-badge {
      font-size: 1.1rem;
      padding: 0.25rem 1.1rem;
      background-color: #f1f1f1;
      color: #444;
      border-radius: 16px;
      display: inline-block;
    }

    .tag-badge:hover {
      background-color: var(--accent, #3A5D44);
      color: white;
    }

    @media (max-width: 550px) {
      .blog-grid {
        grid-template-columns: 1fr;
      }
      .blog-card {
        max-width: 100%;
      }
    }

    .hero-placeholder {
      width: 100%;
      height: 100%;
      background: white;
    }

    .blog-divider {
      height: 1px;
      background: linear-gradient(to right, #ddd, #ccc, #ddd);
      margin: 2.5rem 0;
      border-radius: 1px;
      opacity: 0.9;
    }

    .search-filter-container {
      width: 100%;
      margin: 3rem 0;
      display: flex;
      gap: 1rem;
      align-items: flex-start;
    }

    .search-box {
      flex: 1;
      position: relative;
      display: flex;
      align-items: center;
    }

    .search-box input {
      padding: 1.2rem 1.5rem 1.2rem 3.5rem;
      font-size: 1.3rem;
      border: 2px solid #e5e5e5;
      border-radius: 8px;
      width: 100%;
      background: #fafafa;
      transition: all 0.3s ease;
      outline: none;
      margin: 0;
      box-sizing: border-box;
    }

    .search-box input:focus {
      border-color: #333;
      background: #fff;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .search-box input::placeholder {
      color: #999;
      font-weight: 400;
    }

    .search-icon {
      position: absolute;
      left: 1.2rem;
      top: 50%;
      transform: translateY(-50%);
      color: #999;
      font-size: 1.1rem;
      pointer-events: none;
      z-index: 1;
    }

    .filter-dropdown {
      position: relative;
    }

    .filter-button {
      padding: 0.8rem;
      font-size: 1.3rem;
      border: 2px solid #e5e5e5;
      border-radius: 8px;
      background: #fafafa;
      color: #333;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      min-width: 3.6rem;
      width: 3.6rem;
    }

    .filter-button:hover,
    .filter-button.active {
      border-color: #333;
      background: #fff;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .filter-dropdown-content {
      position: absolute;
      top: 100%;
      right: 0;
      background: white;
      border: 2px solid #e5e5e5;
      border-radius: 8px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
      z-index: 1000;
      min-width: 200px;
      max-height: 300px;
      overflow-y: auto;
      display: none;
    }

    .filter-dropdown-content.show {
      display: block;
    }

    .filter-option {
      padding: 1rem 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .filter-option:hover {
      background: #f5f5f5;
    }

    .filter-option input[type="checkbox"] {
      margin: 0;
      cursor: pointer;
      accent-color: #6b8e6b;
      transform: scale(1.1);
    }

    .filter-option label {
      cursor: pointer;
      margin: 0;
      font-size: 1.2rem;
      color: #333;
      flex: 1;
    }

    .filter-count {
      font-size: 1rem;
      color: #666;
      background: #f0f0f0;
      padding: 0.2rem 0.5rem;
      border-radius: 12px;
    }

    @media (max-width: 768px) {
      .search-filter-container {
        gap: 1rem;
      }

      .filter-dropdown-content {
        right: 0;
        left: auto;
        min-width: 250px;
      }
      .blog-meta {
        font-size: 1.4rem;
      }

      .blog-date,
      .blog-reading-time {
        font-size: 1.4rem;
        color: #666;
      }
    }

    footer {
      margin-top: 4rem;
      text-align: center;
      font-size: 1.4rem;
      color: #999;
    }

    .footer-content {
      max-width: calc(3 * 350px + 2 * 2rem);
      margin: 0 auto;
    }

    /* Featured Post Styles - Prominent & Bold */
    .featured-section {
      margin: 4rem 0;
      position: relative;
    }

    .featured-post {
      width: 100%;
      background: #fff;
      border: 2px solid #3A5D44;
      border-radius: 12px;
      overflow: hidden;
      transition: all 0.3s ease;
      text-decoration: none;
      display: block;
      position: relative;
      z-index: 1;
    }

    .featured-post::before {
      content: '⭐ FEATURED ARTICLE';
      position: absolute;
      top: 0;
      right: 0;
      background: linear-gradient(135deg, #238a33, #3A5D44);
      color: white;
      padding: 0.75rem 1.5rem;
      border-bottom-left-radius: 12px;
      font-size: 0.9rem;
      font-weight: 700;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      box-shadow: 0 3px 12px rgba(35, 138, 51, 0.4);
      z-index: 2;
    }

    .featured-post:hover {
      border-color: #238a33;
      transform: translateY(-4px);
    }

    .featured-content {
      display: grid;
      grid-template-columns: 2fr 1fr;
      align-items: stretch;
      background: #fff;
    }

    .featured-text {
      padding: 2rem 2rem 2rem 3rem;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    .featured-title {
      font-size: 2.4rem;
      font-weight: 700;
      line-height: 1.2;
      margin-bottom: 1rem;
      color: #111;
      letter-spacing: -0.02em;
    }

    .featured-description {
      font-size: 1.4rem;
      line-height: 1.5;
      color: #4b5563;
      margin-bottom: 1.5rem;
      font-weight: 400;
    }

    .featured-meta {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      font-size: 1.3rem;
      color: #6b7280;
      font-weight: 500;
    }

    .featured-image {
      overflow: hidden;
      background: #f9fafb;
      height: 100%;
      min-height: 200px;
    }

    .featured-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      display: block;
    }

    .featured-tags {
      display: flex;
      gap: 0.75rem;
      margin-top: 1.5rem;
    }

    .featured-tag {
      background: #f0f7f0;
      color: #3A5D44;
      border: 1px solid #d4e8d4;
      padding: 0.4rem 0.8rem;
      border-radius: 4px;
      font-size: 0.9rem;
      font-weight: 600;
      letter-spacing: 0.01em;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .featured-content {
        grid-template-columns: 1fr;
        min-height: auto;
      }

      .featured-text {
        padding: 1.5rem;
      }

      .featured-title {
        font-size: 2rem;
      }

      .featured-description {
        font-size: 1.3rem;
      }

      .featured-meta {
        font-size: 1.2rem;
        gap: 1.2rem;
      }

      .featured-image {
        height: auto;
        min-height: 160px;
        order: -1;
      }

      .featured-image img {
        height: auto;
        min-height: 160px;
      }

      .featured-post::before {
        font-size: 1rem;
        padding: 0.8rem 1rem;
      }
      @media (max-width: 550px) {
        .blog-grid {
          grid-template-columns: 1fr;
        }
        .blog-card {
          max-width: 100%;
        }
      }
    }

    @media (max-width: 820px) {
      .blog-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      .blog-card {
        max-width: 100%;
      }
      }

      @media (max-width: 550px) {
      .blog-grid {
        grid-template-columns: 1fr;
      }
      .blog-card {
        max-width: 100%;
      }
      }

    /* Pagination Styles */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 0.5rem;
      margin: 4rem 0 8rem 0;
      flex-wrap: wrap;
    }

    .pagination-button {
      padding: 0.8rem 1.2rem;
      font-size: 1.4rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      background: #fff;
      color: #333;
      text-decoration: none;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 0.2rem;
      font-weight: 500;
    }

    .pagination-button:hover:not(.disabled) {
      border-color: #333;
      background: #f8f8f8;
      transform: translateY(-1px);
    }

    .pagination-button.active {
      background: #000;
      color: #fff;
      border-color: #000;
    }

    .pagination-button.disabled {
      opacity: 0.4;
      cursor: not-allowed;
      pointer-events: none;
    }

    .pagination-ellipsis {
      padding: 0.8rem 0.5rem;
      color: #999;
      font-size: 1.4rem;
    }

    @media (max-width: 550px) {
      .pagination {
        gap: 0.3rem;
      }

      .pagination-button {
        padding: 0.6rem 1rem;
        font-size: 1.3rem;
      }
    }
  </style>

  <div class="container">
    <div class="blog-header">
      <h1>My <span class="highlight">blog</span> & <span class="highlight">writings</span>.</h1>
      <p>Thoughts, technical insights, and explorations across technology, biology, machine learning, and everything in between. Can be opinionated sometimes.</p>
      <div class="blog-divider"></div>
    </div>

    <!-- Featured Post Section (only on page 1) -->
    {featuredPost && (
      <div class="featured-section">
        <a href={`/blog/${featuredPost.slug}`} class="featured-post">
          <div class="featured-content">
            <div class="featured-text">
              <h3 class="featured-title">{featuredPost.data.title}</h3>
              <p class="featured-description">{featuredPost.data.description}</p>

              <div class="featured-meta">
                <span>{new Date(featuredPost.data.date).toLocaleDateString()}</span>
                <span>{getReadingTime(featuredPost.body)} min read</span>
              </div>
            </div>

            <div class="featured-image">
              {featuredPost.data.heroImage ? (
                <img src={featuredPost.data.heroImage} alt={featuredPost.data.title} loading="lazy" />
              ) : (
                <div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #9ca3af; font-size: 2rem;">📊</div>
              )}
            </div>
          </div>
        </a>
      </div>
    )}

    <div class="search-filter-container">
      <div class="search-box">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" class="search-icon" width="16" height="16" fill="currentColor">
          <path d="M480 272C480 317.9 465.1 360.3 440 394.7L566.6 521.4C579.1 533.9 579.1 554.2 566.6 566.7C554.1 579.2 533.8 579.2 521.3 566.7L394.7 440C360.3 465.1 317.9 480 272 480C157.1 480 64 386.9 64 272C64 157.1 157.1 64 272 64C386.9 64 480 157.1 480 272zM272 416C351.5 416 416 351.5 416 272C416 192.5 351.5 128 272 128C192.5 128 128 192.5 128 272C128 351.5 192.5 416 272 416z"/>
        </svg>
        <input id="search" type="text" placeholder="Search posts..." />
      </div>

      <div class="filter-dropdown">
        <button class="filter-button" id="filterButton" title="Filter by tags" data-umami-event="Filter by tags">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" width="28" height="28" fill="currentColor">
            <path d="M96 128C83.1 128 71.4 135.8 66.4 147.8C61.4 159.8 64.2 173.5 73.4 182.6L256 365.3L256 480C256 488.5 259.4 496.6 265.4 502.6L329.4 566.6C338.6 575.8 352.3 578.5 364.3 573.5C376.3 568.5 384 556.9 384 544L384 365.3L566.6 182.7C575.8 173.5 578.5 159.8 573.5 147.8C568.5 135.8 556.9 128 544 128L96 128z"/>
          </svg>
        </button>
        <div class="filter-dropdown-content" id="filterDropdown">
          <div class="filter-option">
            <input type="checkbox" id="all-tags" checked />
            <label for="all-tags">All posts</label>
            <span class="filter-count">{allPosts.length}</span>
          </div>
          {allTags.map(tag => {
            const tagCount = allPosts.filter(post => post.data.tags?.includes(tag)).length;
            return (
              <div class="filter-option">
                <input type="checkbox" id={`tag-${tag}`} data-tag={tag} />
                <label for={`tag-${tag}`}>{tag}</label>
                <span class="filter-count">{tagCount}</span>
              </div>
            );
          })}
        </div>
      </div>
    </div>

    <div class="blog-grid">
      {posts.map(({ slug, data, body }) => (
        <a
          href={`/blog/${slug}`}
          class="blog-card"
          data-tags={data.tags ? data.tags.join(',') : ''}
        >
          <div class="blog-hero-image">
            {data.heroImage ? (
              <img src={data.heroImage} alt={data.title} loading="lazy" />
            ) : (
              <div class="hero-placeholder"></div>
            )}
          </div>
          <div class="blog-content">
            <h3 class="blog-title">{data.title}</h3>
            <div class="blog-meta">
              <span class="blog-date">
                {new Date(data.date).toLocaleDateString()}
              </span>
              <span class="meta-separator">•</span>
              <span class="blog-reading-time">
                {getReadingTime(body)} min read
              </span>
            </div>
            <p class="blog-description">{data.description ?? "No description provided."}</p>

            <div class="tag-list">
              {data.tags && data.tags.length > 0 ? (
                data.tags.sort().map(tag => (
                  <span class="tag-badge">#{tag}</span>
                ))
              ) : null}
            </div>
          </div>
        </a>
      ))}
    </div>

    <!-- Pagination -->
    <div class="pagination">
      {currentPage > 1 ? (
        <a href={`/blog/${currentPage - 1}`} class="pagination-button">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" width="16" height="16" fill="currentColor">
            <path d="M169.4 297.4C156.9 309.9 156.9 330.2 169.4 342.7L361.4 534.7C373.9 547.2 394.2 547.2 406.7 534.7C419.2 522.2 419.2 501.9 406.7 489.4L237.3 320L406.6 150.6C419.1 138.1 419.1 117.8 406.6 105.3C394.1 92.8 373.8 92.8 361.3 105.3L169.3 297.3z"/>
          </svg>
          Previous
        </a>
      ) : (
        <span class="pagination-button disabled">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" width="16" height="16" fill="currentColor">
            <path d="M169.4 297.4C156.9 309.9 156.9 330.2 169.4 342.7L361.4 534.7C373.9 547.2 394.2 547.2 406.7 534.7C419.2 522.2 419.2 501.9 406.7 489.4L237.3 320L406.6 150.6C419.1 138.1 419.1 117.8 406.6 105.3C394.1 92.8 373.8 92.8 361.3 105.3L169.3 297.3z"/>
          </svg>
          Previous
        </span>
      )}

      {paginationButtons.map(button => {
        if (button.type === 'ellipsis') {
          return <span class="pagination-ellipsis">...</span>;
        }
        return (
          <a
            href={`/blog/${button.pageNum}`}
            class={`pagination-button ${button.isActive ? 'active' : ''}`}
          >
            {button.pageNum}
          </a>
        );
      })}

      {currentPage < totalPages ? (
        <a href={`/blog/${currentPage + 1}`} class="pagination-button">
          Next
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" width="16" height="16" fill="currentColor">
            <path d="M471.1 297.4C483.6 309.9 483.6 330.2 471.1 342.7L279.1 534.7C266.6 547.2 246.3 547.2 233.8 534.7C221.3 522.2 221.3 501.9 233.8 489.4L403.2 320L233.9 150.6C221.4 138.1 221.4 117.8 233.9 105.3C246.4 92.8 266.7 92.8 279.2 105.3L471.2 297.3z"/>
          </svg>
        </a>
      ) : (
        <span class="pagination-button disabled">
          Next
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" width="16" height="16" fill="currentColor">
            <path d="M471.1 297.4C483.6 309.9 483.6 330.2 471.1 342.7L279.1 534.7C266.6 547.2 246.3 547.2 233.8 534.7C221.3 522.2 221.3 501.9 233.8 489.4L403.2 320L233.9 150.6C221.4 138.1 221.4 117.8 233.9 105.3C246.4 92.8 266.7 92.8 279.2 105.3L471.2 297.3z"/>
          </svg>
        </span>
      )}
    </div>

    <Footer showDivider={true} />
  </div>

  <script is:inline>
    // Search post with Fuse.js
    let searchData = [];
    let fuse = null;
    let selectedTags = new Set();

    async function setupSearch() {
      try {
        const response = await fetch('/search-index.json');
        searchData = await response.json();

        const FuseModule = await import('https://esm.sh/fuse.js@7.1.0');
        fuse = new FuseModule.default(searchData, {
          keys: ['title', 'description', 'tags'],
          threshold: 0.3,
          ignoreLocation: true
        });
      } catch (error) {
        console.error('Search failed to load:', error);
      }
    }

    function filterPosts() {
      const query = document.getElementById('search')?.value || '';
      const cards = document.querySelectorAll('.blog-card');

      cards.forEach(card => {
        const href = card.getAttribute('href');
        const slug = href ? href.split('/').pop() : '';
        const cardTags = card.getAttribute('data-tags');
        const postTags = cardTags ? cardTags.split(',').filter(tag => tag.trim()) : [];

        let showCard = true;

        // Filter by search query
        if (query.trim() && fuse) {
          const results = fuse.search(query);
          const matchedSlugs = results.map(result => result.item.slug);
          showCard = showCard && matchedSlugs.includes(slug);
        }

        // Filter by selected tags
        if (selectedTags.size > 0) {
          const hasSelectedTag = postTags.some(tag => selectedTags.has(tag.trim()));
          showCard = showCard && hasSelectedTag;
        }

        card.style.display = showCard ? '' : 'none';
      });
    }

    function connectSearchBox() {
      const searchBox = document.getElementById('search');
      if (!searchBox) return;

      searchBox.addEventListener('input', () => filterPosts());
      searchBox.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') filterPosts();
      });
    }

    function setupFilter() {
      const filterButton = document.getElementById('filterButton');
      const filterDropdown = document.getElementById('filterDropdown');
      const allTagsCheckbox = document.getElementById('all-tags');

      if (!filterButton || !filterDropdown) return;

      // Remove any existing event listeners by cloning and replacing the button
      const newFilterButton = filterButton.cloneNode(true);
      filterButton.parentNode.replaceChild(newFilterButton, filterButton);

      // Toggle dropdown - attach to the new button
      newFilterButton.addEventListener('click', (e) => {
        e.stopPropagation();
        filterDropdown.classList.toggle('show');
        newFilterButton.classList.toggle('active');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!filterDropdown.contains(e.target) && !newFilterButton.contains(e.target)) {
          filterDropdown.classList.remove('show');
          newFilterButton.classList.remove('active');
        }
      });

      // Prevent dropdown from closing when clicking inside
      filterDropdown.addEventListener('click', (e) => {
        e.stopPropagation();
      });

      // Handle "All posts" checkbox
      if (allTagsCheckbox) {
        allTagsCheckbox.addEventListener('change', (e) => {
          if (e.target.checked) {
            selectedTags.clear();
            // Uncheck all tag checkboxes
            document.querySelectorAll('[data-tag]').forEach(checkbox => {
              checkbox.checked = false;
            });
          }
          filterPosts();
        });
      }

      // Handle individual tag checkboxes
      document.querySelectorAll('[data-tag]').forEach(checkbox => {
        checkbox.addEventListener('change', (e) => {
          const tag = e.target.dataset.tag;

          if (e.target.checked) {
            selectedTags.add(tag);
            // Uncheck "All posts"
            if (allTagsCheckbox) allTagsCheckbox.checked = false;
          } else {
            selectedTags.delete(tag);
            // If no tags selected, check "All posts"
            if (selectedTags.size === 0 && allTagsCheckbox) {
              allTagsCheckbox.checked = true;
            }
          }

          filterPosts();
        });
      });
    }

    function animateCards() {
      if (typeof anime !== 'undefined') {
        anime({
          targets: '.blog-card',
          opacity: [0, 1],
          translateY: [20, 0],
          delay: anime.stagger(100),
          duration: 700,
          easing: 'easeOutQuad'
        });
      }
    }

    // Search initialization state
    let searchInitialized = false;

    // Initialize everything when DOM and external scripts are ready
    async function initializeBlogPage() {
      try {
        // Initialize search functionality (only once)
        if (!searchInitialized) {
          await setupSearch();
          searchInitialized = true;
        }

        // Reconnect UI elements
        connectSearchBox();
        setupFilter();

        setTimeout(animateCards, 100);

      } catch (error) {
        console.error('Failed to initialize blog page:', error);
        connectSearchBox();
        setupFilter();
      }
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeBlogPage);
    } else {
      initializeBlogPage();
    }

    // Re-initialize after View Transitions
    document.addEventListener('astro:after-swap', initializeBlogPage);
  </script>
</BaseLayout>
